name: NDK build

on:
  workflow_dispatch:
  push:
    branches: [ main, dev, 1.16.4 ]
  pull_request:
    branches: [ main, dev, 1.16.4 ]

env:
     module_id: clockmod
     version: 1.5.0-Dev.${{ github.run_number }}
     BSVersion: 1.17.0
     bs_hook: 2_3_0
     codegen: 0_13_0
    
jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
      name: Checkout
      with:
        submodules: true
        lfs: true

    - name: Create ndkpath.txt
      run: |
        echo "$ANDROID_NDK_LATEST_HOME" > ${GITHUB_WORKSPACE}/ndkpath.txt
        cat ${GITHUB_WORKSPACE}/ndkpath.txt
      
#     - name: Cache QPM
#       id: cache-qpm
#       uses: actions/cache@v2
#       env:
#         cache-name: cache-qpm
#       with:
#         path: QPM
#         key: ${{ runner.os }}-${{ env.cache-name }}-1
#         restore-keys: |
#           ${{ runner.os }}-${{ env.cache-name }}-1

    - name: Get QPM
#      if: steps.cache-qpm.outputs.cache-hit != 'true'
      uses: dawidd6/action-download-artifact@v2
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        workflow: main.yml
        name: QPM-ubuntu-x64
        path: QPM
        repo: sc2ad/QuestPackageManager

    - name: QPM Dependencies Cache
      id: cache-qpm-deps
      uses: actions/cache@v2
      env:
        cache-name: cache-qpm-deps
      with:
        path: QPM_Temp
        key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('qpm.json', '.github/buildMod.yml') }}
        restore-keys: |
          ${{ runner.os }}-${{ env.cache-name }}-
          ${{ runner.os }}-${{ env.cache-name }}
      
    - name: QPM Restore
      run: |
        chmod +x ./QPM/QPM
        ./QPM/QPM restore

    - name: Check dependency Folders
      run: |
        echo "Checking extern Folder"
        ls -lh ${GITHUB_WORKSPACE}/extern/
        echo ""
        echo "Checking QPM_Temp Folders"
        ls -lh QPM_Temp/
        echo ""
        echo "Listing beatsaber-hook folder"
        ls QPM_Temp/beatsaber-hook/
        echo ""
        echo "Listing codegen folder"
        ls QPM_Temp/codegen/
        echo ""
        echo "Listing all .so files in QPM_Temp"
        find QPM_Temp -type f -name "*.so"
#      continue-on-error: true

    - name: Build
      run: |
        cd ${GITHUB_WORKSPACE}
        pwsh -Command ./build.ps1 --actions

    - name: Get Library Name
      id: libname
      run: |
        cd ./libs/arm64-v8a/
        pattern="lib${module_id}*.so"
        files=( $pattern )
        echo ::set-output name=NAME::"${files[0]}"

    - name: Package QMOD
      run: |
        cd ${GITHUB_WORKSPACE}
        pwsh -Command ./buildQMOD.ps1 --package

    - name: Upload non-debug artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ steps.libname.outputs.NAME }}
        path: ./libs/arm64-v8a/${{ steps.libname.outputs.NAME }}
        if-no-files-found: error
    - name: Upload debug artifact
      uses: actions/upload-artifact@v2
      with:
        name: debug_${{ steps.libname.outputs.NAME }}
        path: ./obj/local/arm64-v8a/${{ steps.libname.outputs.NAME }}
        if-no-files-found: error
    - name: Upload QMOD
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.module_id }}-(UNZIP-for-QMOD)
        path: ./${{ env.module_id }}.qmod
        if-no-files-found: warn
