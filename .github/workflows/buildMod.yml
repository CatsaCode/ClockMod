name: NDK build

on:
  workflow_dispatch:
  push:
    branches: [ main, dev, 1.15.0 ]
  pull_request:
    branches: [ main, dev, 1.15.0 ]

env:
     module_id: clockmod
     version: 1.4.0-Dev
     BSVersion: 1.15.0
     bs_hook: 1_3_3
     codegen: 0_8_1
     ndkname: android-ndk-r22
    
jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
      name: Checkout
      with:
        submodules: true
        lfs: true
    - name: Install Powershell
      run: sudo apt-get install -y powershell

    - name: Cache Android NDK
      id: cache-ndk
      uses: actions/cache@v2
      env:
        cache-name: cache-ndk
      with:
        path: ndk
        key: ${{ runner.os }}-${{ env.cache-name }}-${{ env.ndkname }}
        restore-keys: |
          ${{ runner.os }}-${{ env.cache-name }}-${{ env.ndkname }}
    
    - name: Install Android NDK
      if: steps.cache-ndk.outputs.cache-hit != 'true'
      run: |
        wget -q -O ndk.zip https://dl.google.com/android/repository/${ndkname}-linux-x86_64.zip
        unzip -q ndk.zip
        mv ${ndkname} ndk

    - name: Create ndkpath.txt
      run: |
        cd ndk
        pwd > ${GITHUB_WORKSPACE}/ndkpath.txt
      
#     - name: Cache QPM
#       id: cache-qpm
#       uses: actions/cache@v2
#       env:
#         cache-name: cache-qpm
#       with:
#         path: QPM
#         key: ${{ runner.os }}-${{ env.cache-name }}-1
#         restore-keys: |
#           ${{ runner.os }}-${{ env.cache-name }}-1

    - name: Get QPM
      if: steps.cache-qpm.outputs.cache-hit != 'true'
      uses: dawidd6/action-download-artifact@v2
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        workflow: main.yml
        name: QPM-ubuntu-x64
        path: QPM
        repo: Fernthedev/QuestPackageManager
        branch: ci-symlink

    - name: QPM Dependencies Cache
      id: cache-qpm-deps
      uses: actions/cache@v2
      env:
        cache-name: cache-qpm-deps
      with:
        path: QPM_Temp
        key: ${{ runner.os }}-${{ env.cache-name }}
        restore-keys: |
          ${{ runner.os }}-${{ env.cache-name }}
      
    - name: QPM Restore
      if: steps.cache-qpm-deps.outputs.cache-hit != 'true'
      run: |
        chmod +x ./QPM/QPM
        ./QPM/QPM restore

    - name: Check dependency Folders
      run: |
        echo "Checking extern Folder"
        ls -l ${GITHUB_WORKSPACE}/extern/
        echo "Checking QPM_Temp Folder"
        ls -l ${GITHUB_WORKSPACE}/QPM_Temp/

    - name: Build
      run: |
        cd ${GITHUB_WORKSPACE}
        pwsh -Command ./build.ps1 --actions

    - name: Get Library Name
      id: libname
      run: |
        cd ./libs/arm64-v8a/
        pattern="lib${module_id}*.so"
        files=( $pattern )
        echo ::set-output name=NAME::"${files[0]}"

    - name: Package QMOD
      run: |
        cd ${GITHUB_WORKSPACE}
        pwsh -Command ./buildQMOD.ps1 --package

    - name: Upload non-debug artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ steps.libname.outputs.NAME }}
        path: ./libs/arm64-v8a/${{ steps.libname.outputs.NAME }}
        if-no-files-found: error
    - name: Upload debug artifact
      uses: actions/upload-artifact@v2
      with:
        name: debug_${{ steps.libname.outputs.NAME }}
        path: ./obj/local/arm64-v8a/${{ steps.libname.outputs.NAME }}
        if-no-files-found: error
    - name: Upload QMOD
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.module_id }}-(UNZIP-for-QMOD).qmod
        path: ./${{ env.module_id }}.qmod
        if-no-files-found: warn
